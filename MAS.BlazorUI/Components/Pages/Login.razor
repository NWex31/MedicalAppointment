@page "/login"
@inject HttpClient Http
@inject NavigationManager Navigation

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h3>Logowanie do systemu</h3>
                </div>
                <div class="card-body">
                    <EditForm Model="@loginModel" OnValidSubmit="@HandleLogin">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label class="form-label">Email:</label>
                            <InputText @bind-Value="loginModel.Email" class="form-control" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Hasło:</label>
                            <InputText @bind-Value="loginModel.Password" type="password" class="form-control" />
                        </div>

                        <button type="submit" class="btn btn-primary">Zaloguj</button>
                        <a href="/register" class="btn btn-link">Nie masz konta? Zarejestruj się</a>

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger mt-3">@errorMessage</div>
                        }
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new LoginModel();
    private string errorMessage = "";

    private async Task HandleLogin()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/auth/login", loginModel);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResponse>();
                // Tu normalnie zapisałbyś token
                // localStorage.setItem("token", result.Token);
                Navigation.NavigateTo("/doctors");
            }
            else
            {
                errorMessage = "Nieprawidłowy email lub hasło";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Błąd połączenia z serwerem";
        }
    }

    public class LoginModel
    {
        public string Email { get; set; } = "";
        public string Password { get; set; } = "";
    }

    public class LoginResponse
    {
        public string Token { get; set; }
        public string Role { get; set; }
    }
}